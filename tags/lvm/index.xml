<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>lvm on My Digital Chronicle</title>
    <link>http://undying.github.io/tags/lvm/</link>
    <description>Recent content in lvm on My Digital Chronicle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jul 2019 14:27:00 +0000</lastBuildDate><atom:link href="http://undying.github.io/tags/lvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker: Mounting block devices into container</title>
      <link>http://undying.github.io/posts/2019-07-25-mounting_block_devices_into_docker/</link>
      <pubDate>Thu, 25 Jul 2019 14:27:00 +0000</pubDate>
      
      <guid>http://undying.github.io/posts/2019-07-25-mounting_block_devices_into_docker/</guid>
      <description>Today was curious is it possible to mount block device into a docker container without mounting it on system. It&amp;rsquo;s not well documented but found one interesting comment in github.
So, if &amp;ndash;mount option in docker run command is &amp;ldquo;magic&amp;rdquo; on top of &amp;ldquo;mount&amp;rdquo; system call, we can use it. After experimenting a bit here is an example mounting lvm volumes.
First, let&amp;rsquo;s create loop device for LVM:
dd if=/dev/zero of=/tmp/loop bs=1M count=100 losetup /dev/loop0 /tmp/loop Then, making an LVM device:</description>
    </item>
    
    <item>
      <title>Docker: Using docker with LVM Thin Pool</title>
      <link>http://undying.github.io/posts/2016-02-08-using-docker-with-lvm-thin-volumes/</link>
      <pubDate>Mon, 08 Feb 2016 00:21:00 +0300</pubDate>
      
      <guid>http://undying.github.io/posts/2016-02-08-using-docker-with-lvm-thin-volumes/</guid>
      <description>Docker is the nice tool for almost every use case in my sphere. It&amp;rsquo;s easy to use, it&amp;rsquo;s fast to build and deploy. Docker can be used with miscellaneous storage drivers such as btrfs, datamapper, overlayfs, aufs. A long time I was using docker with btrfs backend and everything seems to be nice, but when load on this server increased, corrupted layers are began to appear.
It looks like build process in the next RUN step unable to find files from previous step.</description>
    </item>
    
  </channel>
</rss>
